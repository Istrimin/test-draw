<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ù–∞—Å—Ç–æ—è—â–∏–π –•—É–¥–æ–∂–Ω–∏–∫</title>
    <link rel="stylesheet" href="css/style.css">
    <link rel="stylesheet" href="https://code.jquery.com/ui/1.13.2/themes/base/jquery-ui.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://code.jquery.com/ui/1.13.2/jquery-ui.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jscolor/2.4.5/jscolor.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/howler/2.2.3/howler.min.js"></script>


    </head>
<style>
 #zoomLevelDisplay {
    color: red; /* Set text color to red */
    font-weight: bold; /* Make the text bold */
    font-size: 16px; /* Adjust font size */
    margin-top: 10px; /* Add some space above */
 }
    </style>
<body>
    <div class="base-container">
        <div class="sidebar">
            <a href="index.html" target="_self" title="–í—ã–π—Ç–∏ –∏–∑ –∫–æ–º–∞–Ω—Ç—ã" id="exitLink">üö™</a>
            <button id="message" title="–°–æ–æ–±—â–µ–Ω–∏–µ">‚úâÔ∏è</button>
            <div id="message-container" style="display: none;">
                <p id="message"></p>
            </div>
            <button id="identifyLayerBtn" title="–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–ª–æ–π">üîç</button>
            <input type="file" id="imageInput" accept="image/*" style="display: none;">
            <button id="UploadButton" title="–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (U)">üå∫</button>
            <button id="saveImageBtn" title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ">üé¨</button>
            <button id="eraserBtn">üßΩ</button>
            <button id="changeCursorBtn" title="–°–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å–æ—Ä">üé®</button>
            <button id="undoBtn" title="–û—Ç–º–µ–Ω–∏—Ç—å (Z)">‚ü≤</button>
            <button id="redoBtn" title="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å (X)">‚ü≥</button>
            <button id="clear" title="–û—á–∏—Å—Ç–∏—Ç—å">üíÄ</button>
            <button id="fillModeBtn" title="–ó–∞–ª–∏–≤–∫–∞ (F)">üåä</button>
            <button id="floodFillBtn" title="–ó–∞–ª–∏—Ç—å —Ü–≤–µ—Ç–æ–º">‚ú®</button>
            <button id="eyedropperBtn" title="–ü–∏–ø–µ—Ç–∫–∞ –∑–∞–ª–∏–≤–∫–∏ (A)">üíß</button>
            <button id="brushEyedropperBtn" title="–ü–∏–ø–µ—Ç–∫–∞ –∫–∏—Å—Ç–∏ (D)">üñåÔ∏è</button>
            <button id="deleteAllBtn" title="–£–¥–∞–ª–∏—Ç—å –≤—Å–µ">üóëÔ∏è</button>
            <button id="zoomBtn" title="–õ—É–ø–∞">üîç</button>
            <div id="zoomLevelDisplay" title="–£—Ä–æ–≤–µ–Ω—å –∑—É–º–∞">100%</div>

            <button id="mergeLayers" title="–û–±—ä–µ–¥–∏–Ω–∏—Ç—å —Å–ª–æ–∏">üîó</button>
            <button id="settings" title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏">‚öôÔ∏è</button>
        </div>
        <div class="canvas-and-sliders">
            <div class="layer-panel-wrapper">
                <button id="moveLayerUp" title="–°–ª–æ–π –≤–≤–µ—Ä—Ö">‚ñ≤</button>
                <div class="layer-panel">
                    <div id="layerButtons"></div>
                </div>
                <button id="moveLayerDown" title="–°–ª–æ–π –≤–Ω–∏–∑">‚ñº</button>
            </div>
            <div class="canvas-container">
                <div class="color-picker-and-word">
                    <div class="color-picker-group">
                        <input type="color" id="colorPicker" value="#000000" title="–¶–≤–µ—Ç –∑–∞–ª–∏–≤–∫–∏ (C)">
                        <input type="color" id="colorPicker2" value="#ffffff" title="–±—É–ª—ã–π">
                        <input type="color" id="colorPicker3" value="#ff0000" title="–¶–≤–µ—Ç –∫–∏—Å—Ç–∏ 3">
                        <input type="color" id="colorPicker4" value="#ffa500" title="–¶–≤–µ—Ç –∫–∏—Å—Ç–∏ 4">
                        <input type="color" id="colorPicker5" value="#ffff00" title="–¶–≤–µ—Ç –∫–∏—Å—Ç–∏ 5">
                        <input type="color" id="colorPicker6" value="#008000" title="–¶–≤–µ—Ç –∫–∏—Å—Ç–∏ 6">
                        <input type="color" id="colorPicker7" value="#00ffff" title="–¶–≤–µ—Ç –∫–∏—Å—Ç–∏ 7">
                        <input type="color" id="colorPicker8" value="#0000ff" title="–¶–≤–µ—Ç –∫–∏—Å—Ç–∏ 8">
                        <input type="color" id="colorPicker9" value="#800080" title="–¶–≤–µ—Ç –∫–∏—Å—Ç–∏ 9">
                        <div class="color-picker-group-two">
                            <input type="color" id="backgroundPicker" value="#ffffff" title="–¶–≤–µ—Ç —Ñ–æ–Ω–∞ (B)">
                            <button id="symmetry" title="–°–∏–º–º–µ—Ç—Ä–∏—è (S)">ü¶ã</button>
                        </div>
                    </div>
                    <div class="word-navigation">
                        <button id="previousWord" title="–ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–ª–æ–≤–æ">&lt;</button>
                        <p id="Quizz"></p>
                        <button id="nextWord" title="–°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ">&gt;</button>
                    </div>
                    <div class="header-container">
                        <div class="time-wrapper">
                            <span id="time" class="time"></span>
                            <span id="startTime" class="time"></span>
                            <span id="elapsedTime" class="time"></span>
                        </div>
                    </div>
                </div>
                <div class="canv-container" id="canvasContainer">
    <div id="cursorPanel" class="cursor-panel" style="display: none;">
        <h3>–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å–æ—Ä</h3>
        <div id="cursorList"></div>
    </div>
                </div>
                <div class="slider-group">
                    <div class="tools-column">
                        <label for="opacity" title="–ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å">üëª</label>
                        <input type="range" id="opacity" min="1" max="100" value="100">
                        <span id="opacityValue" style="color: red;">100</span>
                    </div>
                    <div class="tools-column">
                        <label for="brushSize" title="–†–∞–∑–º–µ—Ä –∫–∏—Å—Ç–∏">üñåÔ∏è</label>
                        <input type="range" id="brushSize" min="1" max="300" value="3">
                        <span id="brushSizeValue" style="color: red;">3</span>
                    </div>
                    <div class="tools-column">
                        <div class="pressure-bar-container">
                            <label for="pressureBar" title="–ù–∞–∂–∏–º">üéØ</label>
                            <progress id="pressureBar" value="0" max="4000"></progress>
                            <span id="pressureValue" class="pressure-value"></span>
                            <style>
                                .pressure-value {
                                    font-size: 12px;
                                    color: blue;
                                    margin-left: 5px;
                                }
                            </style>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    </div>
    </div>
    </div>
<script>
    // Get DOM elements
            const brushSizeInput = $('brushSize');
            const opacityInput = $('opacity');
            const pressureBar = $('pressureBar');
            const backgroundPicker = $('backgroundPicker');
            const addLayerBtn = $('addLayerBtn');
            const removeLayerBtn = $('removeLayerBtn');
            const eraserBtn = $('eraserBtn');
            const isPressureSupported = 'onpointermove' in window;
            let layerCount = 0;
            const layers = {};
            const contexts = {};
            const layerColors = {};
            const history = {};
            const redoHistory = {};
            let currentLayer = 1;
            let previousLayer = 1;
            let currentCtx;
            let isDrawing = false;
            let isErasing = false;
            const layerButtons = $('layerButtons');
            const zoomBtn = $('zoomBtn');
            const canvasContainer = $('canvasContainer');
            let zoomLevel =     5;
            const MAX_ZOOM = 100;
            const MIN_ZOOM = 0.1;
            const ZOOM_STEP = 0.01;
            Object.values(layers).forEach(addEventListenersToLayer);
            let isIdentifyingLayer = false;
            let wasDrawing = false;
            const identifyLayerBtn = $('identifyLayerBtn');
            const layerPanel = document.querySelector('.layer-panel');
            let isDraggingScroll = false;
            let startY;
            let lastX = 0;
            let currentCursor = 'auto'; 
            let isZoomActive = false;
       // add –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ä–∞–±–æ—Ç–∞–ª –ª–∏ —ç—Ç–æ—Ç —Å–ø–æ—Å–æ–±
        document.addEventListener('DOMContentLoaded', function () {
            initializeApp();
         });
function createLayer() {
    layerCount++;
    layerColors[layerCount] = '#' + Math.floor(Math.random() * 16777215).toString(16);
    const canvas = document.createElement('canvas');
    canvas.id = `layer${layerCount}`;
   
    canvas.width = 2000;
    canvas.height = 1429;
    canvas.style.width = '700px';
    canvas.style.height = '500px';
           
    canvas.style.position = 'absolute';
    canvas.style.top = '0';
    canvas.style.left = '0';
    canvas.style.zIndex = layerCount;
    canvasContainer.appendChild(canvas);
    layers[layerCount] = canvas;
    contexts[layerCount] = canvas.getContext('2d');
       
    // Scale the context
    contexts[layerCount].scale(2000/700, 1429/500);
    
    const button = document.createElement('button');
    button.textContent = " ‚ù§ ";
    button.classList.add('layer-button');
    button.dataset.layer = layerCount;
    layerButtons.appendChild(button);
    button.addEventListener('click', function () {
        setCurrentLayer(parseInt(this.dataset.layer));
    });
    
    addEventListenersToLayer(canvas);
    setCurrentLayer(layerCount);
    initializeLayer(layerCount);

    history[layerCount] = [];
    redoHistory[layerCount] = [];
    updateLayerButtonColor(layerCount);
    updateLayerOrder();

    // Call updateZoom after the first layer is created
    if (layerCount === 1) {
        updateZoom();
    }

    simulateCtrlPress();
}

    function setCurrentLayer(layerNum) {
        if (currentLayer !== layerNum) {
            previousLayer = currentLayer;
        }
        currentLayer = layerNum;
        currentCtx = contexts[currentLayer];
        document.querySelectorAll('.layer-button').forEach(btn => {
            btn.classList.remove('active-layer');
            if (parseInt(btn.dataset.layer) === currentLayer) {
                btn.classList.add('active-layer');
            }
        });
        if (!isErasing) {
            updateLayerButtonColor(layerNum);
        }
        if (layerColors[layerNum]) {
            currentCtx.strokeStyle = layerColors[layerNum];
        }
       }
    function updateLayerButtonColor(layerNum) {
        const button = document.querySelector(`.layer-button[data-layer="${layerNum}"]`);
        if (button && layerColors[layerNum]) {
            button.style.backgroundColor = layerColors[layerNum];
        }
       }
    function initializeLayer(layerNum) {
            if (layerNum === 0) {
                contexts[layerNum].fillStyle = '#' + Math.floor(Math.random() * 16777215).toString(16);
            } else {
                contexts[layerNum].fillStyle = 'rgba(0,0,0,0)'; // Transparent
            }
            contexts[layerNum].fillRect(0, 0, layers[layerNum].width, layers[layerNum].height);
        }
    function initializeApp() {
    createLayer();
     }
    function saveState() {
        if (!currentCtx) {
            console.error('Error in saveState function', currentLayer);
            return;
        }
        history[currentLayer].push(currentCtx.getImageData(0, 0, layers[currentLayer].width, layers[currentLayer]
            .height));
        redoHistory[currentLayer] = [];
     }

    function startDrawing(e) {
        if (!currentCtx) {
            console.error('Error: currentCtx is undefined in startDrawing.', currentLayer);
            return;
        }
        isDrawing = true;
        const rect = layers[currentLayer].getBoundingClientRect();
        const scaleX = layers[currentLayer].width / rect.width;
        const scaleY = layers[currentLayer].height / rect.height;

        lastX = (e.clientX - rect.left) * scaleX / zoomLevel;
        lastY = (e.clientY - rect.top) * scaleY / zoomLevel;

        saveState();
     }
    function draw(e) {
        if (!isDrawing || !currentCtx) {
            return;
        }
        const rect = layers[currentLayer].getBoundingClientRect();
        const scaleX = layers[currentLayer].width / rect.width;
        const scaleY = layers[currentLayer].height / rect.height;

        const x = (e.clientX - rect.left) * scaleX / zoomLevel;
        const y = (e.clientY - rect.top) * scaleY / zoomLevel;

        const pressure = e.pressure || 1;
        currentCtx.lineWidth = brushSizeInput.value * pressure / zoomLevel;
        currentCtx.lineCap = 'round';
        currentCtx.lineJoin = 'round';
        currentCtx.globalAlpha = opacityInput.value / 100;
        currentCtx.globalCompositeOperation = isErasing ? 'destination-out' : 'source-over';

        currentCtx.beginPath();
        currentCtx.moveTo(lastX, lastY);
        currentCtx.lineTo(x, y);
        currentCtx.stroke();

        if (symmetry) {
            const centerX = layers[currentLayer].width / 2;
            const symmetricLastX = centerX + (centerX - lastX);
            const symmetricX = centerX + (centerX - x);
            currentCtx.beginPath();
            currentCtx.moveTo(symmetricLastX, lastY);
            currentCtx.lineTo(symmetricX, y);
            currentCtx.stroke();
        }

        [lastX, lastY] = [x, y];

        if (isPressureSupported) {
            pressureBar.value = pressure * 10000;
            pressureBar.nextElementSibling.textContent = Math.round(pressure * 100);
        }
     }

    function stopDrawing() {
        if (isDrawing) {
            isDrawing = false;
        }
     }
    function addEventListenersToLayer(layer) {
        layer.addEventListener('pointerdown', startDrawing);
        layer.addEventListener('pointermove', draw);
        layer.addEventListener('pointerup', stopDrawing);
        layer.addEventListener('pointerout', stopDrawing);
        layer.addEventListener('pointercancel', stopDrawing);
     }
    document.querySelectorAll('button, input').forEach(element => {
        element.addEventListener('pointerdown', (e) => {
            e.stopPropagation();
        });
     });
    function togglePreviousLayer() {
        [currentLayer, previousLayer] = [previousLayer, currentLayer];
        const layerButton = document.querySelector(`.layer-button[data-layer="${currentLayer}"]`);
        if (layerButton) {
            layerButton.click();
        }
     }
    function redrawCanvas() {
        currentCtx.fillStyle = backgroundPicker.value;
        currentCtx.fillRect(0, 0, layer2.width, layer2.height);
        if (uploadedImage) {
            currentCtx.drawImage(uploadedImage, 0, 0, layer2.width, layer2.height);
        }
     }
    function setBackground() {
        if (contexts[1]) {
            contexts[1].fillStyle = backgroundPicker.value;
            contexts[1].fillRect(0, 0, layers[1].width, layers[1].height);
            saveState();
        }
     }
    canvasContainer.addEventListener('click', (e) => {
        if (isIdentifyingLayer) {
            identifyLayerClickHandler(e);
            canvasContainer.style.cursor = 'default';
            isDrawing = wasDrawing;
            isIdentifyingLayer = false;
            identifyLayerBtn.classList.remove('active');
        }
     });
    identifyLayerBtn.addEventListener('click', () => {
        isIdentifyingLayer = !isIdentifyingLayer;
        identifyLayerBtn.classList.toggle('active', isIdentifyingLayer);
        if (isIdentifyingLayer) {
            wasDrawing = isDrawing;
            isDrawing = false;
            canvasContainer.style.cursor = 'crosshair';
        } else {
            canvasContainer.style.cursor = 'default';
            isDrawing = wasDrawing;
        }
     });
    function identifyLayerClickHandler(e) {
        const rect = layers[1].getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;
        for (let i = layerCount; i >= 1; i--) {
            const ctx = contexts[i];
            const pixelData = ctx.getImageData(x, y, 1, 1).data;
            if (pixelData[3] > 0) {
                setCurrentLayer(i);
                console.log('Found drawing on layer:', i);
                updateLayerButtonColor(i);
                break;
            }
        }
     }
    layerPanel.addEventListener('pointerdown', (e) => {
        e.preventDefault();
        isDraggingScroll = true;
        startY = e.clientY;
     });
    layerPanel.addEventListener('pointermove', (e) => {
        if (isDraggingScroll) {
            const deltaY = e.clientY - startY;
            layerPanel.scrollTop += deltaY;
            startY = e.clientY;
        }
     });
    layerPanel.addEventListener('pointerup', () => {
        isDraggingScroll = false;
     });
    canvasContainer.addEventListener('pointerdown', handleCanvasClick);
    function handleCanvasClick(e) {
        if (e.altKey) {
            // e.preventDefault();
            identifyLayerClickHandler(e);
        }
     }
    // –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–π –ø–æ–¥ —Ç–µ–∫—É—â–∏–π
        document.addEventListener('keydown', function (e) {
            if (e.key === 'Tab') {
                e.preventDefault();
                createLayerBelowCurrent();
            }
         });
        function createLayerBelowCurrent() {
            const layerButtons = Array.from(document.querySelectorAll('.layer-button'));
            const currentIndex = layerButtons.findIndex(btn => parseInt(btn.dataset.layer) === currentLayer);
            layerCount++;
            const newLayerNum = layerCount;
            const canvas = document.createElement('canvas');
            canvas.id = `layer${newLayerNum}`;
            canvas.width = 600;
            canvas.height = 400;
            canvas.style.position = 'absolute';
            canvas.style.top = '0';
            canvas.style.left = '0';
            canvas.style.zIndex = newLayerNum;
            if (currentIndex !== -1) {
                canvasContainer.insertBefore(canvas, layers[currentLayer]);
            } else {
                canvasContainer.appendChild(canvas);
            }
            layers[newLayerNum] = canvas;
            contexts[newLayerNum] = canvas.getContext('2d');
            layerColors[newLayerNum] = '#' + Math.floor(Math.random() * 16777215).toString(16);
            const button = document.createElement('button');
            button.textContent = " ‚ù§ ";
            button.classList.add('layer-button');
            button.dataset.layer = newLayerNum;
            if (currentIndex !== -1) {
                layerButtons[currentIndex].parentNode.insertBefore(button, layerButtons[currentIndex].nextSibling);
            } else {
                layerButtons.appendChild(button);
            }
            button.addEventListener('click', function () {
                setCurrentLayer(parseInt(this.dataset.layer));
            });
            addEventListenersToLayer(canvas);
            history[newLayerNum] = [];
            redoHistory[newLayerNum] = [];
            setCurrentLayer(newLayerNum);
            initializeLayer(newLayerNum);
            updateLayerButtonColor(newLayerNum);
            updateLayerOrder();
         }
        function updateLayerOrder() {
            const layerButtons = Array.from(document.querySelectorAll('.layer-button'));
            layerButtons.forEach((button, index) => {
                const layerId = parseInt(button.dataset.layer);
                if (layers[layerId]) {
                    layers[layerId].style.zIndex = layerButtons.length - index;
                }
            });
         }
    // –¥–≤–∏–≥–∞–µ–º —Å–ª–æ–∏ –∫–Ω–æ–ø–∫–∞–º–∏
        const moveLayerUpBtn = $('moveLayerUp');
        const moveLayerDownBtn = $('moveLayerDown');
        moveLayerUpBtn.addEventListener('click', () => {
            moveLayerInStack(-1);
         });
        moveLayerDownBtn.addEventListener('click', () => {
            moveLayerInStack(1);
         });
        function moveLayerInStack(direction) {
            const currentLayerButton = document.querySelector(`.layer-button[data-layer="${currentLayer}"]`);
            const targetLayerButton = direction === -1 ? currentLayerButton.previousElementSibling : currentLayerButton
                .nextElementSibling;
            if (targetLayerButton) {
                if (direction === -1) {
                    currentLayerButton.parentNode.insertBefore(currentLayerButton, targetLayerButton);
                } else {
                    currentLayerButton.parentNode.insertBefore(targetLayerButton, currentLayerButton);
                }
                updateLayerOrder();
                currentLayerButton.click();
            }
         }
        const layerButtonsContainer = $('layerButtons');
    // —Å–∏–º—É–ª—è—Ü–∏—è –Ω–∞–∂–∞—Ç–∏—è –∫–æ–Ω—Ç—Ä–ª –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∑—É–º–∞.
        function simulateCtrlPress() {
            isCtrlPressed = true;
            canvasContainer.style.cursor = 'zoom-in';
            
            // Simulate releasing the Ctrl key after a short delay
            setTimeout(() => {
                isCtrlPressed = false;
                canvasContainer.style.cursor = 'default';
            }, 1000); // 1000 ms = 1 second, adjust as needed
        }
    // Zoom functions



        let isCtrlPressed = false;
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Control') {
                isCtrlPressed = true;
            }
         });
        document.addEventListener('keyup', (e) => {
            if (e.key === 'Control') {
                isCtrlPressed = false;
            }
         });
        canvasContainer.addEventListener('mousemove', (e) => {
            if (isZoomActive && isCtrlPressed) {
                const deltaX = e.movementX;
                zoomLevel = Math.min(MAX_ZOOM, Math.max(MIN_ZOOM, zoomLevel + deltaX * ZOOM_STEP));
                updateZoom();
            }
         });
        zoomBtn.addEventListener('click', toggleZoom);
let zoomOriginX = 0;
let zoomOriginY = 0;

function updateZoom(e) {
    const containerRect = canvasContainer.getBoundingClientRect();

    if (e) {
        // Update zoom origin to cursor position
        zoomOriginX = e.clientX - containerRect.left + canvasContainer.scrollLeft;
        zoomOriginY = e.clientY - containerRect.top + canvasContainer.scrollTop;
    }

    Object.values(layers).forEach(layer => {
        layer.style.transform = `scale(${zoomLevel})`;
        layer.style.transformOrigin = `${zoomOriginX}px ${zoomOriginY}px`;
    });

    canvasContainer.style.overflow = 'auto';
    $('zoomLevelDisplay').textContent = `: ${(zoomLevel * 100).toFixed(0)}%`;

    if (Object.keys(layers).length > 0) {
        const firstLayerKey = Object.keys(layers)[0];
        const canvasRect = layers[firstLayerKey].getBoundingClientRect();

        if (e) {
            // Calculate new scroll position to keep cursor at the same relative position
            const scrollX = zoomOriginX * zoomLevel - containerRect.width / 2;
            const scrollY = zoomOriginY * zoomLevel - containerRect.height / 2;

            canvasContainer.scrollLeft = scrollX;
            canvasContainer.scrollTop = scrollY;
        } else {
            // If no event (e.g., initial load), center the canvas
            canvasContainer.scrollLeft = (canvasRect.width * zoomLevel - containerRect.width) / 2;
            canvasContainer.scrollTop = (canvasRect.height * zoomLevel - containerRect.height) / 2;
        }
    }
}

canvasContainer.addEventListener('mousemove', (e) => {
    if (isZoomActive && isCtrlPressed) {
        const containerRect = canvasContainer.getBoundingClientRect();
        const deltaX = e.movementX;
        const oldZoomLevel = zoomLevel;
        zoomLevel = Math.min(MAX_ZOOM, Math.max(MIN_ZOOM, zoomLevel + deltaX * ZOOM_STEP));

        if (oldZoomLevel !== zoomLevel) {
            updateZoom(e);
        }
    }
});

// Update the toggleZoom function to reset zoom origin when deactivating zoom
function toggleZoom() {
    isZoomActive = !isZoomActive;
    zoomBtn.classList.toggle('active', isZoomActive);
    updateCursor();

    if (!isZoomActive) {
        // Reset zoom origin when deactivating zoom
        zoomOriginX = 0;
        zoomOriginY = 0;
        updateZoom();
    }
}



        document.addEventListener('keydown', (e) => {
            if (e.key === 'Control') {
                isCtrlPressed = true;
            }
         });

        document.addEventListener('keyup', (e) => {
            if (e.key === 'Control') {
                isCtrlPressed = false;
            }
         });

        canvasContainer.addEventListener('mousemove', (e) => {
        if (isCtrlPressed) {
            const deltaX = e.movementX;
            zoomLevel = Math.min(MAX_ZOOM, Math.max(MIN_ZOOM, zoomLevel + deltaX * ZOOM_STEP));
            updateZoom();
        }
     });



        // ?

        document.addEventListener('keyup', (e) => {
            if (e.key === 'Control') {
                isCtrlPressed = false;
                canvasContainer.style.cursor = currentCursor; 
            }
         });



     </script>
        <script src="script.js" defer></script>
        <script src="cursors.js" defer></script>
        <script type="module" src="tools.js" defer></script>
        <script type="module" src="constants.js" defer></script>
        <script type="module" src="tools.js" defer></script>
        <script type="module" src="main.js" defer></script>
        <script type="module" src="test.js" defer></script>
        <script type="module" src="settings.js" defer></script>
        <script type="module" src="helperFunction.js" defer></script>
        <script type="module" src="listners.js" defer></script>
        <script type="module" src="buttons.js" defer></script>
        <script type="module" src="hotkey.js" defer></script>
     </body>
 </html>