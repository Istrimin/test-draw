// –ø–æ–ª–Ω—ã–π —ç–∫—Ä–∞–Ω.

    const fullscreenBtn = document.getElementById('fullscreenBtn');
    const baseContainer = document.querySelector('.base-container');

    fullscreenBtn.addEventListener('click', toggleFullscreen);
function toggleFullscreen() {
    if (!document.fullscreenElement) {
        if (baseContainer.requestFullscreen) {
            baseContainer.requestFullscreen();
        } else if (baseContainer.mozRequestFullScreen) { // Firefox
            baseContainer.mozRequestFullScreen();
        } else if (baseContainer.webkitRequestFullscreen) { // Chrome, Safari and Opera
            baseContainer.webkitRequestFullscreen();
        } else if (baseContainer.msRequestFullscreen) { // IE/Edge
            baseContainer.msRequestFullscreen();
        }
    } else {
        if (document.exitFullscreen) {
            document.exitFullscreen();
        } else if (document.mozCancelFullScreen) { // Firefox
            document.mozCancelFullScreen();
        } else if (document.webkitExitFullscreen) { // Chrome, Safari and Opera
            document.webkitExitFullscreen();
        } else if (document.msExitFullscreen) { // IE/Edge
            document.msExitFullscreen();
        }
    }
}

function handleFullscreenChange() {
    if (document.fullscreenElement) {
        enterFullscreenMode();
    } else {
        exitFullscreenMode();
    }
}

function enterFullscreenMode() {
    baseContainer.classList.add('fullscreen-mode');
    resizeCanvas();
}

function exitFullscreenMode() {
    baseContainer.classList.remove('fullscreen-mode');
    resetCanvasSize();
}
function resizeCanvas() {
    const fullscreenWidth = window.innerWidth - sidebar.offsetWidth;
    const fullscreenHeight = window.innerHeight;
    
    Object.values(layers).forEach(layer => {
        const ctx = layer.getContext('2d');
        const tempCanvas = document.createElement('canvas');
        const tempCtx = tempCanvas.getContext('2d');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        tempCanvas.width = layer.width;
        tempCanvas.height = layer.height;
        tempCtx.drawImage(layer, 0, 0);
        
        // –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–∞–Ω–≤–∞—Å–∞
        layer.width = fullscreenWidth;
        layer.height = fullscreenHeight;
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å —É—á–µ—Ç–æ–º –∑—É–º–∞
        ctx.save();
        ctx.scale(zoomLevel, zoomLevel);
        ctx.drawImage(tempCanvas, -offsetX / zoomLevel, -offsetY / zoomLevel);
        ctx.restore();
    });
    
    updateZoom();
}

function resetCanvasSize() {
    const originalWidth = 600;
    const originalHeight = 400;
    
    Object.values(layers).forEach(layer => {
        const ctx = layer.getContext('2d');
        const tempCanvas = document.createElement('canvas');
        const tempCtx = tempCanvas.getContext('2d');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        tempCanvas.width = layer.width;
        tempCanvas.height = layer.height;
        tempCtx.drawImage(layer, 0, 0);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫–∞–Ω–≤–∞—Å–∞
        layer.width = originalWidth;
        layer.height = originalHeight;
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å —É—á–µ—Ç–æ–º –∑—É–º–∞
        ctx.save();
        ctx.scale(1 / zoomLevel, 1 / zoomLevel);
        ctx.drawImage(tempCanvas, offsetX, offsetY);
        ctx.restore();
    });
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑—É–º –∏ —Å–º–µ—â–µ–Ω–∏–µ
    zoomLevel = 1;
    offsetX = 0;
    offsetY = 0;
    
    updateZoom();
}

function updateZoom() {
    const container = document.getElementById('canvasContainer');
    const containerRect = container.getBoundingClientRect();
    
    Object.values(layers).forEach(layer => {
        layer.style.transformOrigin = '0 0';
        layer.style.transform = `scale(${zoomLevel})`;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Å —É—á–µ—Ç–æ–º –∑—É–º–∞
        const layerRect = layer.getBoundingClientRect();
        offsetX = Math.min(Math.max(offsetX, containerRect.width - layerRect.width), 0);
        offsetY = Math.min(Math.max(offsetY, containerRect.height - layerRect.height), 0);
        
        layer.style.left = `${offsetX}px`;
        layer.style.top = `${offsetY}px`;
    });
    
    canvasContainer.style.overflow = 'hidden';
    document.getElementById('zoomLevelDisplay').textContent = `üîé${(zoomLevel * 100).toFixed(0)}%`;
}

// –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
window.addEventListener('resize', () => {
    if (document.fullscreenElement) {
        resizeCanvas();
    }
});


// –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
document.addEventListener('fullscreenchange', handleFullscreenChange);
document.addEventListener('webkitfullscreenchange', handleFullscreenChange);
document.addEventListener('mozfullscreenchange', handleFullscreenChange);
document.addEventListener('MSFullscreenChange', handleFullscreenChange);

// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
const style = document.createElement('style');
style.textContent = `
    .base-container.fullscreen-mode {
        display: flex;
        width: 100vw;
        height: 100vh;
    }
    .base-container.fullscreen-mode .sidebar {
        height: 100vh;
        overflow-y: auto;
    }
    .base-container.fullscreen-mode .canvas-and-sliders {
        flex-grow: 1;
        height: 100vh;
        overflow: hidden;
    }
    .base-container.fullscreen-mode .canvas-container {
        width: 100%;
        height: 100%;
    }
`;
document.head.appendChild(style);



// –°–ª—É—à–∞—Ç–µ–ª–∏ –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
    // –∫—É—Ä—Å–æ—Ä—ã
    const canvasContainer = document.getElementById('canvasContainer');
    const changeCursorBtn = document.getElementById('changeCursorBtn');
    const cursorPanel = document.getElementById('cursorPanel');
    const cursorList = document.getElementById('cursorList');
    // –ø–∏–ø–µ—Ç–∫–∞
    const eyedropperBtn = document.getElementById('eyedropperBtn');
    let isEyedropperActive = false;
    canvasContainer.addEventListener('click', handleEyedropperClick);
    canvasContainer.addEventListener('touchstart', handleEyedropperClick);
    eyedropperBtn.addEventListener('click', handleEyedropperActivation);
    eyedropperBtn.addEventListener('touchstart', handleEyedropperActivation);
    // –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ–≥–æ
    const deleteAllBtn = document.getElementById('deleteAllBtn');
    deleteAllBtn.addEventListener('click', () => {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—Å–µ—Ö —Å–ª–æ–µ–≤?')) {
            deleteAllLayers();
        }
    });
// –ù–∞–∑–Ω–∞—á–∞–µ–º –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–æ–≤
        const colorPickers = document.querySelectorAll('input[type="color"]');
        colorPickers.forEach((picker, index) => {
            picker.addEventListener('input', (event) => {
                setDrawingColor(event.target.value);
            });
            // –ù–∞–∑–Ω–∞—á–∞–µ–º –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–æ–≤
            document.addEventListener('keydown', (e) => {
                if (e.key === (index + 1).toString()) {
                    setDrawingColor(picker.value);
                }
            });
        });
// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    export function exportImage() {
        const mergeCanvas = document.createElement('canvas');
        const mergeCtx = mergeCanvas.getContext('2d');
        mergeCanvas.width = layers[1].width;
        mergeCanvas.height = layers[1].height;
        const layerButtons = Array.from(document.querySelectorAll('.layer-button'));
        layerButtons.sort((a, b) => {
            const layerA = layers[parseInt(a.dataset.layer)];
            const layerB = layers[parseInt(b.dataset.layer)];
            return parseInt(layerA.style.zIndex || 0) - parseInt(layerB.style.zIndex || 0);
        });
        layerButtons.forEach((button) => {
            const layerId = parseInt(button.dataset.layer);
            if (layers[layerId]) {
                mergeCtx.drawImage(layers[layerId], 0, 0);
            }
        });
        const link = document.createElement('a');
        link.download = 'my-drawing.png';
        link.href = mergeCanvas.toDataURL('image/png');
        link.click();
    }
// fix –ü–∏–ø–µ—Ç–∫–∞(—Å–ª–µ–≤–∞ –∂–º–µ—Ç—Å—è, —Å –ø—Ä–∞–≤–∞ –Ω–µ—Ç)
    function handleEyedropperActivation(e) {
    isEyedropperActive = !isEyedropperActive;
    document.body.style.cursor = isEyedropperActive ? 'url(cursors/pipette.png), auto' : 'default';
    eyedropperBtn.classList.toggle('active');
    if (isEyedropperActive) {
        isDrawing = false;
    }
    }
    // fix Function to get pixel color from all layers
        function getPixelColorFromAllLayers(x, y) {
            // –ù–∞—á–∏–Ω–∞–µ–º —Å –≤–µ—Ä—Ö–Ω–µ–≥–æ —Å–ª–æ—è (–∏—Å–∫–ª—é—á–∞—è —Ñ–æ–Ω–æ–≤—ã–π —Å–ª–æ–π)
            for (let i = layerCount; i >= 1; i--) {
                const ctx = contexts[i];
                const pixelData = ctx.getImageData(x, y, 1, 1).data;
                if (pixelData[3] > 0) {
                    return `#${pixelData[0].toString(16).padStart(2, '0')}${pixelData[1].toString(16).padStart(2, '0')}${pixelData[2].toString(16).padStart(2, '0')}`;
                }
            }
            // –ï—Å–ª–∏ –Ω–∏ –Ω–∞ –æ–¥–Ω–æ–º —Å–ª–æ–µ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –ø–∏–∫—Å–µ–ª—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ü–≤–µ—Ç —Ñ–æ–Ω–∞
            return backgroundPicker.value;
        }

    // Function to handle eyedropper click/touch events
    function handleEyedropperClick(e) {
    if (isEyedropperActive) {
        const rect = layers[1].getBoundingClientRect();
        // Get coordinates correctly for both touch and mouse events
        const x = (e.clientX || e.touches[0].clientX) - rect.left;
        const y = (e.clientY || e.touches[0].clientY) - rect.top;
        const pickedColor = getPixelColorFromAllLayers(x, y);
        document.getElementById('colorPicker').value = pickedColor;
        setDrawingColor(pickedColor);
        // !Optionally deactivate eyedropper after picking
        isEyedropperActive = false;
        document.body.style.cursor = 'default';
        eyedropperBtn.classList.remove('active');
    }
    }
// –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ–≥–æ
    function deleteAllLayers() {
        Object.keys(layers).forEach(layerNum => {
            const ctx = contexts[layerNum];
            ctx.clearRect(0, 0, layers[layerNum].width, layers[layerNum].height);
            // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —Å–ª–æ–π (—Ñ–æ–Ω), –∑–∞–ø–æ–ª–Ω—è–µ–º –µ–≥–æ –±–µ–ª—ã–º —Ü–≤–µ—Ç–æ–º
            // if (layerNum === '1') {
            //     ctx.fillStyle = '#ffffff';
            //     ctx.fillRect(0, 0, layers[layerNum].width, layers[layerNum].height);
            // }
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
            saveState();
        });
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        Object.values(layers).forEach(layer => {
            layer.style.display = 'block';
        });
    }
// –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ª–æ–∏
    // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–Ω–æ–ø–∫—É –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Å–ª–æ–µ–≤
    const mergeLayersBtn = document.getElementById('mergeLayers');
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏
    mergeLayersBtn.addEventListener('click', mergeLayers);
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Å–ª–æ–µ–≤
    function mergeLayers() {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ö–æ–ª—Å—Ç –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const mergedCanvas = document.createElement('canvas');
        const mergedCtx = mergedCanvas.getContext('2d');
        mergedCanvas.width = layers[1].width;
        mergedCanvas.height = layers[1].height;
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ —Å–ª–æ–µ–≤ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Ö –ø–æ z-index
        const layerButtons = Array.from(document.querySelectorAll('.layer-button'));
        layerButtons.sort((a, b) => {
            const layerA = layers[parseInt(a.dataset.layer)];
            const layerB = layers[parseInt(b.dataset.layer)];
            return parseInt(layerA.style.zIndex || 0) - parseInt(layerB.style.zIndex || 0);
        });
        // –†–∏—Å—É–µ–º –∫–∞–∂–¥—ã–π —Å–ª–æ–π –Ω–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–º —Ö–æ–ª—Å—Ç–µ
        layerButtons.forEach((button) => {
            const layerId = parseInt(button.dataset.layer);
            if (layers[layerId]) {
                mergedCtx.drawImage(layers[layerId], 0, 0);
            }
        });
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–ª–æ–∏
        layerButtons.forEach((button) => {
            const layerId = parseInt(button.dataset.layer);
            if (layers[layerId]) {
                canvasContainer.removeChild(layers[layerId]);
                delete layers[layerId];
                delete contexts[layerId];
                delete layerColors[layerId];
                delete history[layerId];
                delete redoHistory[layerId];
            }
            button.remove();
        });
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–ª–æ–µ–≤
        layerCount = 0;
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ª–æ–π —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        createLayer();
        currentCtx.drawImage(mergedCanvas, 0, 0);
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        updateLayerOrder();
        setCurrentLayer(1);
    }
// –û—á–∏—Å—Ç–∫–∞ –∫–∞–Ω–≤–∞—Å–∞
    const clearBtn = document.getElementById('clear');
    clearBtn.addEventListener('click', clearCanvas);
    function clearCanvas() {
        saveState();
        if (!currentCtx) return; 
        currentCtx.clearRect(0, 0, layers[currentLayer].width, layers[currentLayer].height);
        saveState();
    }
// –ö—É—Ä—Å–æ—Ä—ã
            const canvas = document.getElementById('yourCanvasId'); 
    document.addEventListener('DOMContentLoaded', () => {
    			const cursorPanel = document.getElementById('cursorPanel');
    			const cursorList = document.getElementById('cursorList');
    			const changeCursorBtn = document.getElementById('changeCursorBtn');


    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É—Ä—Å–æ—Ä–æ–≤
    function loadCursors() {
        // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ—Ä–æ–≤
        cursorList.innerHTML = '';
        
        // –¶–∏–∫–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ 100 –∫—É—Ä—Å–æ—Ä–æ–≤
        for (let i = 1; i <= 50; i++) {
            // –§–æ—Ä–º–∏—Ä—É–µ–º URL –∫—É—Ä—Å–æ—Ä–∞
            const cursorUrl = `cursorsNum/${i}.png`;

            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const image = new Image();
            image.src = cursorUrl;

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            image.onload = () => {
                // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                let targetWidth = image.width;
                let targetHeight = image.height;

                // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –∫—É—Ä—Å–æ—Ä–∞
                const maxSize = 128;

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏–∑–º–µ–Ω—è—Ç—å —Ä–∞–∑–º–µ—Ä
                if (targetWidth > maxSize || targetHeight > maxSize) {
                    const aspectRatio = targetWidth / targetHeight;
                    if (targetWidth > targetHeight) {
                        targetWidth = maxSize;
                        targetHeight = maxSize / aspectRatio;
                    } else {
                        targetHeight = maxSize;
                        targetWidth = maxSize * aspectRatio;
                    }
                }

                // –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–≤–∞—Å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
                const canvas = document.createElement('canvas');
                const ctx = canvas.getContext('2d');
                canvas.width = targetWidth;
                canvas.height = targetHeight;
                ctx.drawImage(image, 0, 0, targetWidth, targetHeight);
                const resizedCursorUrl = canvas.toDataURL();

                // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫—É—Ä—Å–æ—Ä–∞
                const cursorImg = document.createElement('img');
                cursorImg.src = resizedCursorUrl;
                cursorImg.alt = `cursor${i}`;
                cursorImg.style.maxWidth = `${maxSize}px`;

                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∫–ª–∏–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞
                cursorImg.addEventListener('click', () => {
                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –Ω–∞ –∫–∞–Ω–≤–∞—Å–µ
                    canvasContainer.style.cursor = `url(${resizedCursorUrl}), auto`;
                    cursorPanel.style.display = 'none';
                });

                // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –≤ —Å–ø–∏—Å–æ–∫
                cursorList.appendChild(cursorImg);
            };
        }
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∫–ª–∏–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–æ—Ä–∞
    changeCursorBtn.addEventListener('click', () => {
        cursorPanel.style.display = cursorPanel.style.display === 'none' ? 'block' : 'none';
    });

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—É—Ä—Å–æ—Ä—ã
    loadCursors();
    });





// fix fill 
    // add fill (–Ω–µ —É–¥–∞–ª—è—Ç—å)
    // // Flood Fill Functionality
    //         const floodFillBtn = document.getElementById('floodFillBtn');
    //         let isFloodFillActive = false; // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–ª–∏–≤–∫–∏
    //         floodFillBtn.addEventListener('click', () => {
    //             isFloodFillActive = !isFloodFillActive;
    //             floodFillBtn.classList.toggle('active', isFloodFillActive);
    //         });
    //         function floodFill(e) {
    //             if (!currentCtx) {
    //                 console.error('Error: currentCtx is undefined in floodFill. Current layer:', currentLayer);
    //                 return;
    //             }
    //             const startX = e.offsetX;
    //             const startY = e.offsetY;
    //             const imageData = currentCtx.getImageData(0, 0, drawingCanvas.width, drawingCanvas.height); // Use drawingCanvas
    //             const data = imageData.data;
    //             const width = imageData.width;
    //             const height = imageData.height;
    //             const targetColor = getPixelColor(data, startX, startY, width);
    //             const fillColor = hexToRgba(colorPicker.value);
    //             const tolerance = 30;
    //             if (colorMatch(targetColor, fillColor, tolerance)) return;
    //             const stack = [[startX, startY]];
    //             const visited = new Uint8Array(width * height);
    //             while (stack.length) {
    //                 const [x, y] = stack.pop();
    //                 const index = y * width + x;
    //                 if (visited[index]) continue;
    //                 visited[index] = 1;
    //                 const pixelIndex = index * 4;
    //                 const currentColor = data.slice(pixelIndex, pixelIndex + 4);
    //                 if (colorMatch(currentColor, targetColor, tolerance) || isContourPixel(x, y, data, width, height, targetColor, tolerance)) {
    //                     setPixelColor(data, x, y, width, fillColor);
    //                     if (x > 0) stack.push([x - 1, y]);
    //                     if (x < width - 1) stack.push([x + 1, y]);
    //                     if (y > 0) stack.push([x, y - 1]);
    //                     if (y < height - 1) stack.push([x, y + 1]);
    //                 }
    //             }
    //             // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ö–æ–¥
    //             for (let y = 0; y < height; y++) {
    //                 for (let x = 0; x < width; x++) {
    //                     const index = (y * width + x) * 4;
    //                     if (!colorMatch(data.slice(index, index + 4), fillColor, 0) && shouldFillPixel(x, y, data, width, height, fillColor)) {
    //                         setPixelColor(data, x, y, width, fillColor);
    //                     }
    //                 }
    //             }
    //             currentCtx.putImageData(imageData, 0, 0);
    //             saveState();
    //         }
    //         // Modify the event listener for floodFill 
    //         // drawingCanvas.addEventListener('click', (e) => { // Use drawingCanvas here
    //         //   if (isFillMode) {
    //         //     floodFill(e);
    //         //   }
    //         // });
    // // // Flood Fill Functionality
    // // fillModeBtn.addEventListener('click', toggleFillMode);
    // // function toggleFillMode() {
    // //   isFillMode = !isFillMode;
    // //   // Optionally add visual indication of fill mode being active or inactive
    // //   fillModeBtn.classList.toggle('active', isFillMode);
    // // }
    // // // fill
    // // function floodFill(e) {
    // //   const startX = e.offsetX;
    // //   const startY = e.offsetY;
    // //   const imageData = ctx1.getImageData(0, 0, layer1.width, layer1.height);
    // //   const data = imageData.data;
    // //   const width = imageData.width;
    // //   const height = imageData.height;
    // //   const targetColor = getPixelColor(data, startX, startY, width);
    // //   const fillColor = hexToRgba(colorPicker.value);
    // //   const tolerance = 30;
    // //   if (colorMatch(targetColor, fillColor, tolerance)) return;
    // //   const stack = [[startX, startY]];
    // //   const visited = new Uint8Array(width * height);
    // //   while (stack.length) {
    // //     const [x, y] = stack.pop();
    // //     const index = y * width + x;
    // //     if (visited[index]) continue;
    // //     visited[index] = 1;
    // //     const pixelIndex = index * 4;
    // //     const currentColor = data.slice(pixelIndex, pixelIndex + 4);
    // //     if (colorMatch(currentColor, targetColor, tolerance) || isContourPixel(x, y, data, width, height, targetColor, tolerance)) {
    // //       setPixelColor(data, x, y, width, fillColor);
    // //       if (x > 0) stack.push([x - 1, y]);
    // //       if (x < width - 1) stack.push([x + 1, y]);
    // //       if (y > 0) stack.push([x, y - 1]);
    // //       if (y < height - 1) stack.push([x, y + 1]);
    // //     }
    // //   }
    // //   // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ö–æ–¥
    // //   for (let y = 0; y < height; y++) {
    // //     for (let x = 0; x < width; x++) {
    // //       const index = (y * width + x) * 4;
    // //       if (!colorMatch(data.slice(index, index + 4), fillColor, 0) && shouldFillPixel(x, y, data, width, height, fillColor)) {
    // //         setPixelColor(data, x, y, width, fillColor);
    // //       }
    // //     }
    // //   }
    // //   ctx1.putImageData(imageData, 0, 0);
    // //   saveState();
    // // }
    // // function getPixelColor(data, x, y, width) {
    // //   const index = (y * width + x) * 4;
    // //   return data.slice(index, index + 4);
    // // }
    // // function setPixelColor(data, x, y, width, color) {
    // //   const index = (y * width + x) * 4;
    // //   data.set(color, index);
    // // }
    // // function isContourPixel(x, y, data, width, height, targetColor, tolerance) {
    // //   const directions = [[-1, 0], [1, 0], [0, -1], [0, 1], [-1, -1], [-1, 1], [1, -1], [1, 1]];
    // //   const currentColor = getPixelColor(data, x, y, width);
    // //   if (colorMatch(currentColor, targetColor, tolerance)) return false;
    // //   return directions.some(([dx, dy]) => {
    // //     const nx = x + dx;
    // //     const ny = y + dy;
    // //     if (nx >= 0 && nx < width && ny >= 0 && ny < height) {
    // //       const neighborColor = getPixelColor(data, nx, ny, width);
    // //       return colorMatch(neighborColor, targetColor, tolerance);
    // //     }
    // //     return false;
    // //   });
    // // }
    // // function shouldFillPixel(x, y, data, width, height, fillColor) {
    // //   const directions = [[-1, 0], [1, 0], [0, -1], [0, 1], [-1, -1], [-1, 1], [1, -1], [1, 1]];
    // //   let filledNeighbors = 0;
    // //   for (const [dx, dy] of directions) {
    // //     const nx = x + dx;
    // //     const ny = y + dy;
    // //     if (nx >= 0 && nx < width && ny >= 0 && ny < height) {
    // //       const neighborColor = getPixelColor(data, nx, ny, width);
    // //       if (colorMatch(neighborColor, fillColor, 0)) {
    // //         filledNeighbors++;
    // //       }
    // //     }
    // //   }
    // //   return filledNeighbors >= 5;
    // // }
    // // function hexToRgba(hex) {
    // //   const r = parseInt(hex.slice(1, 3), 16);
    // //   const g = parseInt(hex.slice(3, 5), 16);
    // //   const b = parseInt(hex.slice(5, 7), 16);
    // //   return [r, g, b, 255];
    // // }
    // // function colorMatch(a, b, tolerance) {
    // //   return Math.abs(a[0] - b[0]) <= tolerance &&
    // //          Math.abs(a[1] - b[1]) <= tolerance &&
    // //          Math.abs(a[2] - b[2]) <= tolerance &&
    // //          Math.abs(a[3] - b[3]) <= tolerance;
    // // }
    // // // Modify the event listener for floodFill
    // // layer1.addEventListener('click', (e) => {
    // //   if (isFillMode) {
    // //     floodFill(e);
    // //   }
    // // });